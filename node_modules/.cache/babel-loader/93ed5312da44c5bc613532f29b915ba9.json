{"remainingRequest":"/testing-jpl-sqaaas/sqaaas-web/node_modules/thread-loader/dist/cjs.js!/testing-jpl-sqaaas/sqaaas-web/node_modules/babel-loader/lib/index.js!/testing-jpl-sqaaas/sqaaas-web/src/components/NotificationPlugin/index.js","dependencies":[{"path":"/testing-jpl-sqaaas/sqaaas-web/src/components/NotificationPlugin/index.js","mtime":1595319185576},{"path":"/testing-jpl-sqaaas/sqaaas-web/.babelrc","mtime":1595319185564},{"path":"/testing-jpl-sqaaas/sqaaas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/testing-jpl-sqaaas/sqaaas-web/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/testing-jpl-sqaaas/sqaaas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.object.assign\";\nimport Notifications from \"./Notifications.vue\";\nvar NotificationStore = {\n  state: [],\n  // here the notifications will be added\n  settings: {\n    overlap: false,\n    verticalAlign: 'top',\n    horizontalAlign: 'right',\n    type: 'info',\n    timeout: 5000,\n    closeOnClick: true,\n    showClose: true\n  },\n  setOptions: function setOptions(options) {\n    this.settings = Object.assign(this.settings, options);\n  },\n  removeNotification: function removeNotification(timestamp) {\n    var indexToDelete = this.state.findIndex(function (n) {\n      return n.timestamp === timestamp;\n    });\n\n    if (indexToDelete !== -1) {\n      this.state.splice(indexToDelete, 1);\n    }\n  },\n  addNotification: function addNotification(notification) {\n    if (typeof notification === 'string' || notification instanceof String) {\n      notification = {\n        message: notification\n      };\n    }\n\n    notification.timestamp = new Date();\n    notification.timestamp.setMilliseconds(notification.timestamp.getMilliseconds() + this.state.length);\n    notification = Object.assign({}, this.settings, notification);\n    this.state.push(notification);\n  },\n  notify: function notify(notification) {\n    var _this = this;\n\n    if (Array.isArray(notification)) {\n      notification.forEach(function (notificationInstance) {\n        _this.addNotification(notificationInstance);\n      });\n    } else {\n      this.addNotification(notification);\n    }\n  }\n};\nvar NotificationsPlugin = {\n  install: function install(Vue, options) {\n    var app = new Vue({\n      data: {\n        notificationStore: NotificationStore\n      },\n      methods: {\n        notify: function notify(notification) {\n          this.notificationStore.notify(notification);\n        }\n      }\n    });\n    Vue.prototype.$notify = app.notify;\n    Vue.prototype.$notifications = app.notificationStore;\n    Vue.component('Notifications', Notifications);\n\n    if (options) {\n      NotificationStore.setOptions(options);\n    }\n  }\n};\nexport default NotificationsPlugin;",{"version":3,"sources":["/testing-jpl-sqaaas/sqaaas-web/src/components/NotificationPlugin/index.js"],"names":["Notifications","NotificationStore","state","settings","overlap","verticalAlign","horizontalAlign","type","timeout","closeOnClick","showClose","setOptions","options","Object","assign","removeNotification","timestamp","indexToDelete","findIndex","n","splice","addNotification","notification","String","message","Date","setMilliseconds","getMilliseconds","length","push","notify","Array","isArray","forEach","notificationInstance","NotificationsPlugin","install","Vue","app","data","notificationStore","methods","prototype","$notify","$notifications","component"],"mappings":"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","sourcesContent":["import Notifications from './Notifications.vue';\n\nconst NotificationStore = {\n  state: [], // here the notifications will be added\n  settings: {\n    overlap: false,\n    verticalAlign: 'top',\n    horizontalAlign: 'right',\n    type: 'info',\n    timeout: 5000,\n    closeOnClick: true,\n    showClose: true\n  },\n  setOptions(options) {\n    this.settings = Object.assign(this.settings, options);\n  },\n  removeNotification(timestamp) {\n    const indexToDelete = this.state.findIndex(n => n.timestamp === timestamp);\n    if (indexToDelete !== -1) {\n      this.state.splice(indexToDelete, 1);\n    }\n  },\n  addNotification(notification) {\n    if (typeof notification === 'string' || notification instanceof String) {\n      notification = { message: notification };\n    }\n    notification.timestamp = new Date();\n    notification.timestamp.setMilliseconds(\n      notification.timestamp.getMilliseconds() + this.state.length\n    );\n    notification = Object.assign({}, this.settings, notification);\n    this.state.push(notification);\n  },\n  notify(notification) {\n    if (Array.isArray(notification)) {\n      notification.forEach(notificationInstance => {\n        this.addNotification(notificationInstance);\n      });\n    } else {\n      this.addNotification(notification);\n    }\n  }\n};\n\nconst NotificationsPlugin = {\n  install(Vue, options) {\n    let app = new Vue({\n      data: {\n        notificationStore: NotificationStore\n      },\n      methods: {\n        notify(notification) {\n          this.notificationStore.notify(notification);\n        }\n      }\n    });\n    Vue.prototype.$notify = app.notify;\n    Vue.prototype.$notifications = app.notificationStore;\n    Vue.component('Notifications', Notifications);\n    if (options) {\n      NotificationStore.setOptions(options);\n    }\n  }\n};\n\nexport default NotificationsPlugin;\n"]}]}