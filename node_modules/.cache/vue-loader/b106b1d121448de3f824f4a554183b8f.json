{"remainingRequest":"/testing-jpl-sqaaas/sqaaas-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/testing-jpl-sqaaas/sqaaas-web/src/components/Cards/ChartCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/testing-jpl-sqaaas/sqaaas-web/src/components/Cards/ChartCard.vue","mtime":1595319185576},{"path":"/testing-jpl-sqaaas/sqaaas-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/testing-jpl-sqaaas/sqaaas-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/testing-jpl-sqaaas/sqaaas-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Card from './Card.vue'\n\nexport default {\n  name: 'chart-card',\n  components: {\n    Card\n  },\n  props: {\n    chartType: {\n      type: String,\n      default: 'Line' // Line | Pie | Bar\n    },\n    chartOptions: {\n      type: Object,\n      default: () => {\n        return {}\n      }\n    },\n    chartData: {\n      type: Object,\n      default: () => {\n        return {\n          labels: [],\n          series: []\n        }\n      }\n    },\n    responsiveOptions: [Object, Array]\n  },\n  data () {\n    return {\n      chartId: 'no-id',\n      $Chartist: null,\n      chart: null\n    }\n  },\n  methods: {\n    /***\n     * Initializes the chart by merging the chart options sent via props and the default chart options\n     */\n    initChart () {\n      var chartIdQuery = `#${this.chartId}`\n      this.chart = this.$Chartist[this.chartType](chartIdQuery, this.chartData, this.chartOptions, this.responsiveOptions)\n      this.$emit('initialized', this.chart)\n      if (this.chartType === 'Line') {\n        this.animateLineChart()\n      }\n      if (this.chartType === 'Bar') {\n        this.animateBarChart()\n      }\n    },\n    /***\n     * Assigns a random id to the chart\n     */\n    updateChartId () {\n      const currentTime = new Date().getTime().toString()\n      const randomInt = this.getRandomInt(0, currentTime)\n      this.chartId = `div_${randomInt}`\n    },\n    getRandomInt (min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min\n    },\n    animateLineChart () {\n      let seq = 0\n      let durations = 500\n      let delays = 80\n      this.chart.on('draw', (data) => {\n        if (data.type === 'line' || data.type === 'area') {\n          data.element.animate({\n            d: {\n              begin: 600,\n              dur: 700,\n              from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n              to: data.path.clone().stringify(),\n              easing: this.$Chartist.Svg.Easing.easeOutQuint\n            }\n          })\n        } else if (data.type === 'point') {\n          seq++\n          data.element.animate({\n            opacity: {\n              begin: seq * delays,\n              dur: durations,\n              from: 0,\n              to: 1,\n              easing: 'ease'\n            }\n          })\n        }\n      })\n      seq = 0\n    },\n    animateBarChart () {\n      let seq = 0\n      let durations = 500\n      let delays = 80\n      this.chart.on('draw', (data) => {\n        if (data.type === 'bar') {\n          seq++\n          data.element.animate({\n            opacity: {\n              begin: seq * delays,\n              dur: durations,\n              from: 0,\n              to: 1,\n              easing: 'ease'\n            }\n          })\n        }\n      })\n    }\n  },\n  async mounted () {\n    this.updateChartId()\n    const Chartist = await import('chartist')\n    this.$Chartist = Chartist.default || Chartist\n    this.initChart()\n  }\n}\n",{"version":3,"sources":["ChartCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcfile":"ChartCard.vue","sourceRoot":"src/components/Cards","sourcesContent":["<template>\n  <div class=\"card\">\n    <div class=\"card-header\" v-if=\"$slots.header\">\n      <slot name=\"header\"></slot>\n    </div>\n    <div class=\"card-body\">\n      <div :id=\"chartId\" class=\"ct-chart\"></div>\n    </div>\n    <div class=\"card-footer\" v-if=\"$slots.footer\">\n      <slot name=\"footer\"></slot>\n    </div>\n  </div>\n</template>\n<script>\n  import Card from './Card.vue'\n\n  export default {\n    name: 'chart-card',\n    components: {\n      Card\n    },\n    props: {\n      chartType: {\n        type: String,\n        default: 'Line' // Line | Pie | Bar\n      },\n      chartOptions: {\n        type: Object,\n        default: () => {\n          return {}\n        }\n      },\n      chartData: {\n        type: Object,\n        default: () => {\n          return {\n            labels: [],\n            series: []\n          }\n        }\n      },\n      responsiveOptions: [Object, Array]\n    },\n    data () {\n      return {\n        chartId: 'no-id',\n        $Chartist: null,\n        chart: null\n      }\n    },\n    methods: {\n      /***\n       * Initializes the chart by merging the chart options sent via props and the default chart options\n       */\n      initChart () {\n        var chartIdQuery = `#${this.chartId}`\n        this.chart = this.$Chartist[this.chartType](chartIdQuery, this.chartData, this.chartOptions, this.responsiveOptions)\n        this.$emit('initialized', this.chart)\n        if (this.chartType === 'Line') {\n          this.animateLineChart()\n        }\n        if (this.chartType === 'Bar') {\n          this.animateBarChart()\n        }\n      },\n      /***\n       * Assigns a random id to the chart\n       */\n      updateChartId () {\n        const currentTime = new Date().getTime().toString()\n        const randomInt = this.getRandomInt(0, currentTime)\n        this.chartId = `div_${randomInt}`\n      },\n      getRandomInt (min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min\n      },\n      animateLineChart () {\n        let seq = 0\n        let durations = 500\n        let delays = 80\n        this.chart.on('draw', (data) => {\n          if (data.type === 'line' || data.type === 'area') {\n            data.element.animate({\n              d: {\n                begin: 600,\n                dur: 700,\n                from: data.path.clone().scale(1, 0).translate(0, data.chartRect.height()).stringify(),\n                to: data.path.clone().stringify(),\n                easing: this.$Chartist.Svg.Easing.easeOutQuint\n              }\n            })\n          } else if (data.type === 'point') {\n            seq++\n            data.element.animate({\n              opacity: {\n                begin: seq * delays,\n                dur: durations,\n                from: 0,\n                to: 1,\n                easing: 'ease'\n              }\n            })\n          }\n        })\n        seq = 0\n      },\n      animateBarChart () {\n        let seq = 0\n        let durations = 500\n        let delays = 80\n        this.chart.on('draw', (data) => {\n          if (data.type === 'bar') {\n            seq++\n            data.element.animate({\n              opacity: {\n                begin: seq * delays,\n                dur: durations,\n                from: 0,\n                to: 1,\n                easing: 'ease'\n              }\n            })\n          }\n        })\n      }\n    },\n    async mounted () {\n      this.updateChartId()\n      const Chartist = await import('chartist')\n      this.$Chartist = Chartist.default || Chartist\n      this.initChart()\n    }\n  }\n</script>\n<style>\n\n</style>\n"]}]}